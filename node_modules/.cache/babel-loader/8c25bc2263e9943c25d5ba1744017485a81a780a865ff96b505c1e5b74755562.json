{"ast":null,"code":"import { cartActions } from \"./cart-slice\";\nimport { uiActions } from \"./ui-slice\";\nexport const fetchingCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://redux-cart-c064c-default-rtdb.firebaseio.com/cart.json\");\n      if (!response.ok) {\n        throw new Error(\"could not send data\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error..\",\n        message: \"fetching  cart data failed\"\n      }));\n    }\n  };\n};\n\n//  using thunk to fetch data\nexport const sendCartData = cart => {\n  // by calling sendCartData it return funtion\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"sending..\",\n      message: \"sending the cart data\"\n    }));\n    const sendingRequest = async () => {\n      const response = await fetch(\"https://redux-cart-c064c-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error(\"sending cart data failed\");\n      }\n    };\n    try {\n      await sendingRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"success..\",\n        message: \"send  cart data successfully\"\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error..\",\n        message: \"send  cart data failed\"\n      }));\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","fetchingCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendingRequest","method","body","JSON","stringify"],"sources":["/home/vivek/Desktop/shoping-cart-by-reduxtoolkit/src/store/cart-actions.js"],"sourcesContent":["import { cartActions } from \"./cart-slice\";\nimport { uiActions } from \"./ui-slice\";\n\nexport const fetchingCartData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://redux-cart-c064c-default-rtdb.firebaseio.com/cart.json\"\n      );\n\n      if (!response.ok) {\n        throw new Error(\"could not send data\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({items: cartData.items || [], totalQuantity: cartData.totalQuantity}))\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error..\",\n          message: \"fetching  cart data failed\",\n        })\n      );\n    }\n  };\n};\n\n//  using thunk to fetch data\nexport const sendCartData = (cart) => {\n  // by calling sendCartData it return funtion\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"sending..\",\n        message: \"sending the cart data\",\n      })\n    );\n\n    const sendingRequest = async () => {\n      const response = await fetch(\n        \"https://redux-cart-c064c-default-rtdb.firebaseio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"sending cart data failed\");\n      }\n    };\n\n    try {\n      await sendingRequest();\n\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"success..\",\n          message: \"send  cart data successfully\",\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error..\",\n          message: \"send  cart data failed\",\n        })\n      );\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,SAAS,QAAQ,YAAY;AAEtC,OAAO,MAAMC,gBAAgB,GAAG,MAAM;EACpC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAAgE,CACjE;MAED,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IACD,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMP,SAAS,EAAE;MAClCD,QAAQ,CAACH,WAAW,CAACY,WAAW,CAAC;QAACC,KAAK,EAAEF,QAAQ,CAACE,KAAK,IAAI,EAAE;QAAEC,aAAa,EAAEH,QAAQ,CAACG;MAAa,CAAC,CAAC,CAAC;IACzG,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,QAAQ,CACNF,SAAS,CAACe,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EACpC;EACA,OAAO,MAAOlB,QAAQ,IAAK;IACzBA,QAAQ,CACNF,SAAS,CAACe,gBAAgB,CAAC;MACzBC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,WAAW;MAClBC,OAAO,EAAE;IACX,CAAC,CAAC,CACH;IAED,MAAMG,cAAc,GAAG,YAAY;MACjC,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAAgE,EAChE;QACEiB,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;MAC3B,CAAC,CACF;MACD,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACF,CAAC;IAED,IAAI;MACF,MAAMc,cAAc,EAAE;MAEtBnB,QAAQ,CACNF,SAAS,CAACe,gBAAgB,CAAC;QACzBC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,WAAW;QAClBC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdZ,QAAQ,CACNF,SAAS,CAACe,gBAAgB,CAAC;QACzBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}